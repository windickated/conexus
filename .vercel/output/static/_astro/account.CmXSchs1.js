import{Z as $,_ as O,$ as p,L as x,D as I,H as T,C as F,a0 as j,r as _,s as v}from"./index.Cz-7uHCl.js";function L(a,t){const e=t.token={};function s(r,o,c,i){if(t.token!==e)return;t.resolved=i;let d=t.ctx;c!==void 0&&(d=d.slice(),d[c]=i);const n=r&&(t.current=r)(d);let k=!1;t.block&&(t.blocks?t.blocks.forEach((y,b)=>{b!==o&&y&&(x(),I(y,1,1,()=>{t.blocks[b]===y&&(t.blocks[b]=null)}),T())}):t.block.d(1),n.c(),F(n,1),n.m(t.mount(),t.anchor),k=!0),t.block=n,t.blocks&&(t.blocks[o]=n),k&&j()}if($(a)){const r=O();if(a.then(o=>{p(r),s(t.then,1,t.value,o),p(null)},o=>{if(p(r),s(t.catch,2,t.error,o),p(null),!t.hasCatch)throw o}),t.current!==t.pending)return s(t.pending,0),!0}else{if(t.current!==t.then)return s(t.then,1,t.value,a),!0;t.resolved=a}}function U(a,t,e){const s=t.slice(),{resolved:r}=a;a.current===a.then&&(s[a.value]=r),a.current===a.catch&&(s[a.error]=r),a.block.p(s,e)}const w=[];function u(a,t=_){let e;const s=new Set;function r(i){if(v(a,i)&&(a=i,e)){const d=!w.length;for(const n of s)n[1](),w.push(n,a);if(d){for(let n=0;n<w.length;n+=2)w[n][0](w[n+1]);w.length=0}}}function o(i){r(i(a))}function c(i,d=_){const n=[i,d];return s.add(n),s.size===1&&(e=t(r,o)||_),i(a),()=>{s.delete(n),s.size===0&&e&&(e(),e=null)}}return{set:r,update:o,subscribe:c}}const g=u(null),m=u(!1),S=u(null),N=u(null),A=u(!1);function P(){const{subscribe:a,update:t}=u([]);return{subscribe:a,show:(e,s="info",r=5e3)=>{const o=Date.now();t(c=>[...c,{id:o,message:e,type:s,duration:r}]),setTimeout(()=>{t(c=>c.filter(i=>i.id!==o))},r)},close:e=>{t(s=>s.filter(r=>r.id!==e))}}}const J=P(),f=a=>{a.log&&J.show(`Error ${a.code}: ${a.error}`,"error")},l="/api",E=["/music/coNexus/track01.mp3","/music/coNexus/track02.mp3","/music/coNexus/track03.mp3"],M=a=>{let t=a.length,e;for(;t!==0;)e=Math.floor(Math.random()*t),t--,[a[t],a[e]]=[a[e],a[t]];return a};let D;class h{step_data;#t;hasFetched=!1;jobID=null;interval=null;maxStep=0;constructor(t){this.#t=t,this.step_data={}}static async available(){const t=await fetch(`${l}/available`,{method:"POST"});t.ok||f({code:t.status,error:await t.text()});const e=await t.json();return e.continuable??=[],e}static async start(t){h.#a(t),h.#r(t),m.set(!0);const e=await fetch(`${l}/start`,{body:JSON.stringify({category:t}),method:"POST"});e.ok||f({code:e.status,error:await e.text()});const s=await e.json(),r=new h(s.id);return await r.#e(s),r}static async continue(t){const e=t.story_id,s=t.category;h.#a(s),h.#r(s);const r=await fetch(`${l}/continue`,{body:JSON.stringify({story_id:e}),method:"POST"});r.ok||f({code:r.status,error:await r.text()});const o=await r.json(),c=new h(o.id);return await c.#e(o),c}async loadStep(t){const e=this.#t,s=await fetch(`${l}/step/${t}`,{body:JSON.stringify({story_id:e}),method:"POST"});s.ok||f({code:s.status,error:await s.text()});const r=await s.json();this.step_data=r,g.set(this),m.set(!1),await this.#i(t)}async#i(t){const e=this.#t,s=await fetch(`${l}/step-image/${t}`,{body:JSON.stringify({story_id:e}),method:"POST"});s.ok||f({code:s.status,error:await s.text()}),this.step_data.image=await s.text(),g.set(this),m.set(!1)}static async delete(t){const e=await fetch(`${l}/story/${t}`,{method:"DELETE"});e.ok||f({code:e.status,error:await e.text()})}static#s(t){let s=t.toLowerCase().replace(/[\s.\-\/]+/g,"");return D=t,s}static async fetchRandomMusicUrl(t){const s=`/conexus-categories/music/${h.#s(t)}`,r=await fetch(s);if(!r.ok)return null;const o=await r.json();if(Array.isArray(o)&&o.length>0){let c=o[Math.floor(Math.random()*o.length)];return`${s}/${c.name}`}return null}static async#a(t){let e=JSON.parse(localStorage.getItem("queue")??"[]"),s=null;if(t&&(s=await h.fetchRandomMusicUrl(t),s&&await fetch(s).then(o=>o.ok))){S.set(s);return}e.length===0&&(e=M([...E])),S.set(e.pop()),localStorage.setItem("queue",JSON.stringify(e))}static#n(t){return new Promise(e=>{const s=new Image;s.src=t,s.onload=()=>e(!0),s.onerror=()=>e(!1)})}static async#r(t){let s=`/conexus-categories/images/${h.#s(t)}`,o=await(await fetch(s)).json();if(Array.isArray(o)&&o.length>0){let c=o[Math.floor(Math.random()*o.length)],i=`${s}/${c.name}`;await h.#n(i)&&N.set(i)}}async next_step(t){m.set(!0);const e=await fetch(`${l}/respond`,{method:"POST",body:JSON.stringify({story_id:this.#t,choice:t})});e.ok||f({code:e.status,error:await e.text()}),await this.#e(await e.json())}async#c(){try{const e=await(await fetch(`${l}/new-image-status/${this.jobID}`)).json();if(e.status==="error"){this.#o();return}e.status==="ready"&&(this.step_data.image=e.image,g.set(this),m.set(!1),this.#o())}catch(t){console.error("Failed to check image status:",t)}finally{setTimeout(()=>{this.hasFetched=!1},5e3)}}#l(){this.interval=setInterval(async()=>{await this.#c()},1e4)}#o(){this.interval&&(clearInterval(this.interval),this.interval=null)}async#h(){try{const t=await fetch(`${l}/new-image`,{method:"POST",body:JSON.stringify({story_id:this.#t})});if(!t.ok)throw new Error(await t.text());const e=await t.json();this.jobID=e.jobID,this.hasFetched=!0,this.#l()}catch(t){console.error("Image generation failed:",t)}}async#d(){const t=await fetch(`${l}/image`,{method:"POST",body:JSON.stringify({story_id:this.#t})});t.ok||f({code:t.status,error:await t.text()}),this.step_data.image=await t.text(),g.set(this),m.set(!1)}async#u(){const t=await fetch(`${l}/tts`,{method:"POST",body:JSON.stringify({story_id:this.#t})});t.ok||f({code:t.status,error:await t.text()}),this.step_data.tts=await t.blob(),g.set(this)}async#e(t){this.step_data=t,this.maxStep=t.step,g.set(this),m.set(!1),await Promise.all([this.#h(),this.#u()])}}const R=u(!1),z=u("Connect Wallet"),H=u({user:null,loggedIn:!1}),V=u([]);export{h as C,D as a,S as b,H as c,R as d,z as e,A as f,L as h,m as l,f as n,V as r,g as s,J as t,U as u,u as w};
